@page "/authors"

@inject IJSRuntime js
@inject IAuthorService authorService
@inject NavigationManager navManager

<h4>Authors List</h4>

@if (Authors != null)
{
    <a class="btn btn-lg btn-success mb-5" href="/author/create">Create Author</a>

    @if (Response.Success == false)
    {
        <div class="alert alert-danger">@(Response.Message + " - " + Response.ValidationErrors)</div>
        <br />
    }
    
    <VirtualizedComp Items="Authors" TotalSize="TotalSize" Context="author" OnScroll="LoadAuthors">
        <TableHeader>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Bio</th>
            <th>Actions</th>
        </TableHeader>
        <RowTemplate>
            <td>@author.Id</td>
            <td>@author.FirstName</td>
            <td>@author.LastName</td>
            <td>@author.Bio</td>
            <td>
                <a class="btn btn-primary" href="/author/view/@author.Id">
                    <span class="oi oi-book"></span> Details
                </a>

                <a class="btn btn-warning" href="/author/update/@author.Id">
                    <span class="oi oi-pencil">
                    </span> Edit
                </a>
                <button class="btn btn-danger" @onclick="@(() => DeleteAuthor(@author.Id))">
                    <span class="oi oi-delete">
                    </span> Delete
                </button>
            </td>
        </RowTemplate>
    </VirtualizedComp>
}

@code {
    List<AuthorReadDto>? Authors = new();
    Response<List<AuthorReadDto>> Response = new() { Success = true };
    public int TotalSize { get; set; }

    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var responseVitualized = await authorService.GetAuthorsWithPg(queryParams);
        Authors = responseVitualized.Data.Items.ToList();
        TotalSize = responseVitualized.Data.TotalSize;
    }

    private async Task DeleteAuthor(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            var response = await authorService.DeleteAuthorAsync(authorId);
            if (response.Success)
                await OnInitializedAsync();
        }
    }
}