@page "/author/update/{id:int}"

@inject IMapper mapper
@inject IAuthorService authorService
@inject NavigationManager navManager

<h4>Update Author</h4>

<div class="card p-4 mt-5 col-4">
    <EditForm Model="Author" OnValidSubmit="OnUpdateAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (responseUpdate?.Success == false)
        {
            <div class="alert alert-danger">@responseUpdate.Message</div>
        }

        <div>
            <label class="fw-bold">First Name</label>
            <InputText class="form-control" @bind-Value="Author.FirstName" />
            <br />
        </div>

        <div>
            <label class="fw-bold">Last Name</label>
            <InputText class="form-control" @bind-Value="Author.LastName" />
            <br />
        </div>

        <div>
            <label class="fw-bold">Bio</label>
            <InputText class="form-control" @bind-Value="Author.Bio" />
            <br />
        </div>
        <br>

        <button class="btn btn-primary" type="submit">Update Author</button>
    </EditForm>
</div>


@code {
    AuthorUpdateDto? Author = new();
    Response<AuthorUpdateDto>? responseUpdate = new() { Success = true };

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var responseGet = await authorService.GetAuthorAsync(Id);
        if (responseGet.Success)
            Author = mapper.Map<AuthorUpdateDto>(responseGet.Data);
    }

    private async Task OnUpdateAuthor()
    {
        var responseUpdate = await authorService.UpdateAuthorAsync(Id, Author);
        if (responseUpdate.Success)
            navManager.NavigateTo("/authors");
    }
}